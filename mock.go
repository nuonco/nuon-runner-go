// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package nuonrunner is a generated GoMock package.
package nuonrunner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nuonco/nuon-runner-go/models"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateHealthCheck mocks base method.
func (m *MockClient) CreateHealthCheck(ctx context.Context, req *models.ServiceCreateRunnerHealthCheckRequest) (*models.AppRunnerHealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHealthCheck", ctx, req)
	ret0, _ := ret[0].(*models.AppRunnerHealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHealthCheck indicates an expected call of CreateHealthCheck.
func (mr *MockClientMockRecorder) CreateHealthCheck(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHealthCheck", reflect.TypeOf((*MockClient)(nil).CreateHealthCheck), ctx, req)
}

// CreateHeartBeat mocks base method.
func (m *MockClient) CreateHeartBeat(ctx context.Context, req *models.ServiceCreateRunnerHeartBeatRequest) (*models.AppRunnerHeartBeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHeartBeat", ctx, req)
	ret0, _ := ret[0].(*models.AppRunnerHeartBeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHeartBeat indicates an expected call of CreateHeartBeat.
func (mr *MockClientMockRecorder) CreateHeartBeat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHeartBeat", reflect.TypeOf((*MockClient)(nil).CreateHeartBeat), ctx, req)
}

// CreateJobExecution mocks base method.
func (m *MockClient) CreateJobExecution(ctx context.Context, jobID string, req *models.ServiceCreateRunnerJobExecutionRequest) (*models.AppRunnerJobExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobExecution", ctx, jobID, req)
	ret0, _ := ret[0].(*models.AppRunnerJobExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobExecution indicates an expected call of CreateJobExecution.
func (mr *MockClientMockRecorder) CreateJobExecution(ctx, jobID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobExecution", reflect.TypeOf((*MockClient)(nil).CreateJobExecution), ctx, jobID, req)
}

// CreateJobExecutionHeartBeat mocks base method.
func (m *MockClient) CreateJobExecutionHeartBeat(ctx context.Context, typ, status string) (*models.AppRunnerJobExecutionHeartBeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobExecutionHeartBeat", ctx, typ, status)
	ret0, _ := ret[0].(*models.AppRunnerJobExecutionHeartBeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobExecutionHeartBeat indicates an expected call of CreateJobExecutionHeartBeat.
func (mr *MockClientMockRecorder) CreateJobExecutionHeartBeat(ctx, typ, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobExecutionHeartBeat", reflect.TypeOf((*MockClient)(nil).CreateJobExecutionHeartBeat), ctx, typ, status)
}

// GetJob mocks base method.
func (m *MockClient) GetJob(ctx context.Context, jobID string) (*models.AppRunnerJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, jobID)
	ret0, _ := ret[0].(*models.AppRunnerJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockClientMockRecorder) GetJob(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockClient)(nil).GetJob), ctx, jobID)
}

// GetJobPlan mocks base method.
func (m *MockClient) GetJobPlan(ctx context.Context, jobID string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobPlan", ctx, jobID)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobPlan indicates an expected call of GetJobPlan.
func (mr *MockClientMockRecorder) GetJobPlan(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobPlan", reflect.TypeOf((*MockClient)(nil).GetJobPlan), ctx, jobID)
}

// GetJobs mocks base method.
func (m *MockClient) GetJobs(ctx context.Context, typ, status string) ([]*models.AppRunnerJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs", ctx, typ, status)
	ret0, _ := ret[0].([]*models.AppRunnerJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockClientMockRecorder) GetJobs(ctx, typ, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockClient)(nil).GetJobs), ctx, typ, status)
}

// SetRunnerID mocks base method.
func (m *MockClient) SetRunnerID(runnerID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRunnerID", runnerID)
}

// SetRunnerID indicates an expected call of SetRunnerID.
func (mr *MockClientMockRecorder) SetRunnerID(runnerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunnerID", reflect.TypeOf((*MockClient)(nil).SetRunnerID), runnerID)
}

// UpdateJobExecution mocks base method.
func (m *MockClient) UpdateJobExecution(ctx context.Context, jobExecutionID string, req *models.ServiceUpdateRunnerJobExecutionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobExecution", ctx, jobExecutionID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobExecution indicates an expected call of UpdateJobExecution.
func (mr *MockClientMockRecorder) UpdateJobExecution(ctx, jobExecutionID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobExecution", reflect.TypeOf((*MockClient)(nil).UpdateJobExecution), ctx, jobExecutionID, req)
}
