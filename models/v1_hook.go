// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Hook v1 hook
//
// swagger:model v1.Hook
type V1Hook struct {

	// DeletePolicies are the policies that indicate when to delete the hook
	DeletePolicies []V1HookDeletePolicy `json:"delete_policies"`

	// Events are the events that this hook fires on.
	Events []V1HookEvent `json:"events"`

	// Kind is the Kubernetes kind.
	Kind string `json:"kind,omitempty"`

	// LastRun indicates the date/time this was last run.
	LastRun struct {
		V1HookExecution
	} `json:"last_run,omitempty"`

	// Manifest is the manifest contents.
	Manifest string `json:"manifest,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// OutputLogPolicies defines whether we should copy hook logs back to main process
	OutputLogPolicies []V1HookOutputLogPolicy `json:"output_log_policies"`

	// Path is the chart-relative path to the template.
	Path string `json:"path,omitempty"`

	// Weight indicates the sort order for execution among similar Hook type
	Weight int64 `json:"weight,omitempty"`
}

// Validate validates this v1 hook
func (m *V1Hook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputLogPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Hook) validateDeletePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletePolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletePolicies); i++ {

		if err := m.DeletePolicies[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_policies" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_policies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1Hook) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

		if err := m.Events[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("events" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1Hook) validateLastRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRun) { // not required
		return nil
	}

	return nil
}

func (m *V1Hook) validateOutputLogPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputLogPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputLogPolicies); i++ {

		if err := m.OutputLogPolicies[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_log_policies" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_log_policies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this v1 hook based on the context it is used
func (m *V1Hook) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeletePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputLogPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Hook) contextValidateDeletePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeletePolicies); i++ {

		if swag.IsZero(m.DeletePolicies[i]) { // not required
			return nil
		}

		if err := m.DeletePolicies[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_policies" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_policies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1Hook) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if swag.IsZero(m.Events[i]) { // not required
			return nil
		}

		if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("events" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *V1Hook) contextValidateLastRun(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1Hook) contextValidateOutputLogPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputLogPolicies); i++ {

		if swag.IsZero(m.OutputLogPolicies[i]) { // not required
			return nil
		}

		if err := m.OutputLogPolicies[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_log_policies" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_log_policies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Hook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Hook) UnmarshalBinary(b []byte) error {
	var res V1Hook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
