// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1HookDeletePolicy v1 hook delete policy
//
// swagger:model v1.HookDeletePolicy
type V1HookDeletePolicy string

func NewV1HookDeletePolicy(value V1HookDeletePolicy) *V1HookDeletePolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1HookDeletePolicy.
func (m V1HookDeletePolicy) Pointer() *V1HookDeletePolicy {
	return &m
}

const (

	// V1HookDeletePolicyHookDashSucceeded captures enum value "hook-succeeded"
	V1HookDeletePolicyHookDashSucceeded V1HookDeletePolicy = "hook-succeeded"

	// V1HookDeletePolicyHookDashFailed captures enum value "hook-failed"
	V1HookDeletePolicyHookDashFailed V1HookDeletePolicy = "hook-failed"

	// V1HookDeletePolicyBeforeDashHookDashCreation captures enum value "before-hook-creation"
	V1HookDeletePolicyBeforeDashHookDashCreation V1HookDeletePolicy = "before-hook-creation"
)

// for schema
var v1HookDeletePolicyEnum []interface{}

func init() {
	var res []V1HookDeletePolicy
	if err := json.Unmarshal([]byte(`["hook-succeeded","hook-failed","before-hook-creation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1HookDeletePolicyEnum = append(v1HookDeletePolicyEnum, v)
	}
}

func (m V1HookDeletePolicy) validateV1HookDeletePolicyEnum(path, location string, value V1HookDeletePolicy) error {
	if err := validate.EnumCase(path, location, value, v1HookDeletePolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 hook delete policy
func (m V1HookDeletePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1HookDeletePolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 hook delete policy based on context it is used
func (m V1HookDeletePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
