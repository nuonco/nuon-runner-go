// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1HookOutputLogPolicy v1 hook output log policy
//
// swagger:model v1.HookOutputLogPolicy
type V1HookOutputLogPolicy string

func NewV1HookOutputLogPolicy(value V1HookOutputLogPolicy) *V1HookOutputLogPolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1HookOutputLogPolicy.
func (m V1HookOutputLogPolicy) Pointer() *V1HookOutputLogPolicy {
	return &m
}

const (

	// V1HookOutputLogPolicyHookDashSucceeded captures enum value "hook-succeeded"
	V1HookOutputLogPolicyHookDashSucceeded V1HookOutputLogPolicy = "hook-succeeded"

	// V1HookOutputLogPolicyHookDashFailed captures enum value "hook-failed"
	V1HookOutputLogPolicyHookDashFailed V1HookOutputLogPolicy = "hook-failed"
)

// for schema
var v1HookOutputLogPolicyEnum []interface{}

func init() {
	var res []V1HookOutputLogPolicy
	if err := json.Unmarshal([]byte(`["hook-succeeded","hook-failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1HookOutputLogPolicyEnum = append(v1HookOutputLogPolicyEnum, v)
	}
}

func (m V1HookOutputLogPolicy) validateV1HookOutputLogPolicyEnum(path, location string, value V1HookOutputLogPolicy) error {
	if err := validate.EnumCase(path, location, value, v1HookOutputLogPolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 hook output log policy
func (m V1HookOutputLogPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1HookOutputLogPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 hook output log policy based on context it is used
func (m V1HookOutputLogPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
