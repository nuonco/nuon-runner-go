// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1HookEvent v1 hook event
//
// swagger:model v1.HookEvent
type V1HookEvent string

func NewV1HookEvent(value V1HookEvent) *V1HookEvent {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1HookEvent.
func (m V1HookEvent) Pointer() *V1HookEvent {
	return &m
}

const (

	// V1HookEventPreDashInstall captures enum value "pre-install"
	V1HookEventPreDashInstall V1HookEvent = "pre-install"

	// V1HookEventPostDashInstall captures enum value "post-install"
	V1HookEventPostDashInstall V1HookEvent = "post-install"

	// V1HookEventPreDashDelete captures enum value "pre-delete"
	V1HookEventPreDashDelete V1HookEvent = "pre-delete"

	// V1HookEventPostDashDelete captures enum value "post-delete"
	V1HookEventPostDashDelete V1HookEvent = "post-delete"

	// V1HookEventPreDashUpgrade captures enum value "pre-upgrade"
	V1HookEventPreDashUpgrade V1HookEvent = "pre-upgrade"

	// V1HookEventPostDashUpgrade captures enum value "post-upgrade"
	V1HookEventPostDashUpgrade V1HookEvent = "post-upgrade"

	// V1HookEventPreDashRollback captures enum value "pre-rollback"
	V1HookEventPreDashRollback V1HookEvent = "pre-rollback"

	// V1HookEventPostDashRollback captures enum value "post-rollback"
	V1HookEventPostDashRollback V1HookEvent = "post-rollback"

	// V1HookEventTest captures enum value "test"
	V1HookEventTest V1HookEvent = "test"
)

// for schema
var v1HookEventEnum []interface{}

func init() {
	var res []V1HookEvent
	if err := json.Unmarshal([]byte(`["pre-install","post-install","pre-delete","post-delete","pre-upgrade","post-upgrade","pre-rollback","post-rollback","test"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1HookEventEnum = append(v1HookEventEnum, v)
	}
}

func (m V1HookEvent) validateV1HookEventEnum(path, location string, value V1HookEvent) error {
	if err := validate.EnumCase(path, location, value, v1HookEventEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 hook event
func (m V1HookEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1HookEventEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 hook event based on context it is used
func (m V1HookEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
