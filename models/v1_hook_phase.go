// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1HookPhase v1 hook phase
//
// swagger:model v1.HookPhase
type V1HookPhase string

func NewV1HookPhase(value V1HookPhase) *V1HookPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1HookPhase.
func (m V1HookPhase) Pointer() *V1HookPhase {
	return &m
}

const (

	// V1HookPhaseUnknown captures enum value "Unknown"
	V1HookPhaseUnknown V1HookPhase = "Unknown"

	// V1HookPhaseRunning captures enum value "Running"
	V1HookPhaseRunning V1HookPhase = "Running"

	// V1HookPhaseSucceeded captures enum value "Succeeded"
	V1HookPhaseSucceeded V1HookPhase = "Succeeded"

	// V1HookPhaseFailed captures enum value "Failed"
	V1HookPhaseFailed V1HookPhase = "Failed"
)

// for schema
var v1HookPhaseEnum []interface{}

func init() {
	var res []V1HookPhase
	if err := json.Unmarshal([]byte(`["Unknown","Running","Succeeded","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1HookPhaseEnum = append(v1HookPhaseEnum, v)
	}
}

func (m V1HookPhase) validateV1HookPhaseEnum(path, location string, value V1HookPhase) error {
	if err := validate.EnumCase(path, location, value, v1HookPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 hook phase
func (m V1HookPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1HookPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 hook phase based on context it is used
func (m V1HookPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
