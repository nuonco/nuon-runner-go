// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HelmShHelmV4PkgReleaseV1Status helm sh helm v4 pkg release v1 status
//
// swagger:model helm_sh_helm_v4_pkg_release_v1.Status
type HelmShHelmV4PkgReleaseV1Status string

func NewHelmShHelmV4PkgReleaseV1Status(value HelmShHelmV4PkgReleaseV1Status) *HelmShHelmV4PkgReleaseV1Status {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HelmShHelmV4PkgReleaseV1Status.
func (m HelmShHelmV4PkgReleaseV1Status) Pointer() *HelmShHelmV4PkgReleaseV1Status {
	return &m
}

const (

	// HelmShHelmV4PkgReleaseV1StatusUnknown captures enum value "unknown"
	HelmShHelmV4PkgReleaseV1StatusUnknown HelmShHelmV4PkgReleaseV1Status = "unknown"

	// HelmShHelmV4PkgReleaseV1StatusDeployed captures enum value "deployed"
	HelmShHelmV4PkgReleaseV1StatusDeployed HelmShHelmV4PkgReleaseV1Status = "deployed"

	// HelmShHelmV4PkgReleaseV1StatusUninstalled captures enum value "uninstalled"
	HelmShHelmV4PkgReleaseV1StatusUninstalled HelmShHelmV4PkgReleaseV1Status = "uninstalled"

	// HelmShHelmV4PkgReleaseV1StatusSuperseded captures enum value "superseded"
	HelmShHelmV4PkgReleaseV1StatusSuperseded HelmShHelmV4PkgReleaseV1Status = "superseded"

	// HelmShHelmV4PkgReleaseV1StatusFailed captures enum value "failed"
	HelmShHelmV4PkgReleaseV1StatusFailed HelmShHelmV4PkgReleaseV1Status = "failed"

	// HelmShHelmV4PkgReleaseV1StatusUninstalling captures enum value "uninstalling"
	HelmShHelmV4PkgReleaseV1StatusUninstalling HelmShHelmV4PkgReleaseV1Status = "uninstalling"

	// HelmShHelmV4PkgReleaseV1StatusPendingDashInstall captures enum value "pending-install"
	HelmShHelmV4PkgReleaseV1StatusPendingDashInstall HelmShHelmV4PkgReleaseV1Status = "pending-install"

	// HelmShHelmV4PkgReleaseV1StatusPendingDashUpgrade captures enum value "pending-upgrade"
	HelmShHelmV4PkgReleaseV1StatusPendingDashUpgrade HelmShHelmV4PkgReleaseV1Status = "pending-upgrade"

	// HelmShHelmV4PkgReleaseV1StatusPendingDashRollback captures enum value "pending-rollback"
	HelmShHelmV4PkgReleaseV1StatusPendingDashRollback HelmShHelmV4PkgReleaseV1Status = "pending-rollback"
)

// for schema
var helmShHelmV4PkgReleaseV1StatusEnum []interface{}

func init() {
	var res []HelmShHelmV4PkgReleaseV1Status
	if err := json.Unmarshal([]byte(`["unknown","deployed","uninstalled","superseded","failed","uninstalling","pending-install","pending-upgrade","pending-rollback"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		helmShHelmV4PkgReleaseV1StatusEnum = append(helmShHelmV4PkgReleaseV1StatusEnum, v)
	}
}

func (m HelmShHelmV4PkgReleaseV1Status) validateHelmShHelmV4PkgReleaseV1StatusEnum(path, location string, value HelmShHelmV4PkgReleaseV1Status) error {
	if err := validate.EnumCase(path, location, value, helmShHelmV4PkgReleaseV1StatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this helm sh helm v4 pkg release v1 status
func (m HelmShHelmV4PkgReleaseV1Status) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHelmShHelmV4PkgReleaseV1StatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this helm sh helm v4 pkg release v1 status based on context it is used
func (m HelmShHelmV4PkgReleaseV1Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
