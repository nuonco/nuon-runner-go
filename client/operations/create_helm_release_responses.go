// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-runner-go/models"
)

// CreateHelmReleaseReader is a Reader for the CreateHelmRelease structure.
type CreateHelmReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateHelmReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateHelmReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateHelmReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateHelmReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateHelmReleaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateHelmReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateHelmReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}] CreateHelmRelease", response, response.Code())
	}
}

// NewCreateHelmReleaseOK creates a CreateHelmReleaseOK with default headers values
func NewCreateHelmReleaseOK() *CreateHelmReleaseOK {
	return &CreateHelmReleaseOK{}
}

/*
CreateHelmReleaseOK describes a response with status code 200, with default header values.

OK
*/
type CreateHelmReleaseOK struct {
	Payload []*models.AppHelmRelease
}

// IsSuccess returns true when this create helm release o k response has a 2xx status code
func (o *CreateHelmReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create helm release o k response has a 3xx status code
func (o *CreateHelmReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create helm release o k response has a 4xx status code
func (o *CreateHelmReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create helm release o k response has a 5xx status code
func (o *CreateHelmReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create helm release o k response a status code equal to that given
func (o *CreateHelmReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create helm release o k response
func (o *CreateHelmReleaseOK) Code() int {
	return 200
}

func (o *CreateHelmReleaseOK) Error() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseOK  %+v", 200, o.Payload)
}

func (o *CreateHelmReleaseOK) String() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseOK  %+v", 200, o.Payload)
}

func (o *CreateHelmReleaseOK) GetPayload() []*models.AppHelmRelease {
	return o.Payload
}

func (o *CreateHelmReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHelmReleaseBadRequest creates a CreateHelmReleaseBadRequest with default headers values
func NewCreateHelmReleaseBadRequest() *CreateHelmReleaseBadRequest {
	return &CreateHelmReleaseBadRequest{}
}

/*
CreateHelmReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateHelmReleaseBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create helm release bad request response has a 2xx status code
func (o *CreateHelmReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create helm release bad request response has a 3xx status code
func (o *CreateHelmReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create helm release bad request response has a 4xx status code
func (o *CreateHelmReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create helm release bad request response has a 5xx status code
func (o *CreateHelmReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create helm release bad request response a status code equal to that given
func (o *CreateHelmReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create helm release bad request response
func (o *CreateHelmReleaseBadRequest) Code() int {
	return 400
}

func (o *CreateHelmReleaseBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *CreateHelmReleaseBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *CreateHelmReleaseBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateHelmReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHelmReleaseUnauthorized creates a CreateHelmReleaseUnauthorized with default headers values
func NewCreateHelmReleaseUnauthorized() *CreateHelmReleaseUnauthorized {
	return &CreateHelmReleaseUnauthorized{}
}

/*
CreateHelmReleaseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateHelmReleaseUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create helm release unauthorized response has a 2xx status code
func (o *CreateHelmReleaseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create helm release unauthorized response has a 3xx status code
func (o *CreateHelmReleaseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create helm release unauthorized response has a 4xx status code
func (o *CreateHelmReleaseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create helm release unauthorized response has a 5xx status code
func (o *CreateHelmReleaseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create helm release unauthorized response a status code equal to that given
func (o *CreateHelmReleaseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create helm release unauthorized response
func (o *CreateHelmReleaseUnauthorized) Code() int {
	return 401
}

func (o *CreateHelmReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateHelmReleaseUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateHelmReleaseUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateHelmReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHelmReleaseForbidden creates a CreateHelmReleaseForbidden with default headers values
func NewCreateHelmReleaseForbidden() *CreateHelmReleaseForbidden {
	return &CreateHelmReleaseForbidden{}
}

/*
CreateHelmReleaseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateHelmReleaseForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create helm release forbidden response has a 2xx status code
func (o *CreateHelmReleaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create helm release forbidden response has a 3xx status code
func (o *CreateHelmReleaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create helm release forbidden response has a 4xx status code
func (o *CreateHelmReleaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create helm release forbidden response has a 5xx status code
func (o *CreateHelmReleaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create helm release forbidden response a status code equal to that given
func (o *CreateHelmReleaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create helm release forbidden response
func (o *CreateHelmReleaseForbidden) Code() int {
	return 403
}

func (o *CreateHelmReleaseForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseForbidden  %+v", 403, o.Payload)
}

func (o *CreateHelmReleaseForbidden) String() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseForbidden  %+v", 403, o.Payload)
}

func (o *CreateHelmReleaseForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateHelmReleaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHelmReleaseNotFound creates a CreateHelmReleaseNotFound with default headers values
func NewCreateHelmReleaseNotFound() *CreateHelmReleaseNotFound {
	return &CreateHelmReleaseNotFound{}
}

/*
CreateHelmReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateHelmReleaseNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create helm release not found response has a 2xx status code
func (o *CreateHelmReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create helm release not found response has a 3xx status code
func (o *CreateHelmReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create helm release not found response has a 4xx status code
func (o *CreateHelmReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create helm release not found response has a 5xx status code
func (o *CreateHelmReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create helm release not found response a status code equal to that given
func (o *CreateHelmReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create helm release not found response
func (o *CreateHelmReleaseNotFound) Code() int {
	return 404
}

func (o *CreateHelmReleaseNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseNotFound  %+v", 404, o.Payload)
}

func (o *CreateHelmReleaseNotFound) String() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseNotFound  %+v", 404, o.Payload)
}

func (o *CreateHelmReleaseNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateHelmReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHelmReleaseInternalServerError creates a CreateHelmReleaseInternalServerError with default headers values
func NewCreateHelmReleaseInternalServerError() *CreateHelmReleaseInternalServerError {
	return &CreateHelmReleaseInternalServerError{}
}

/*
CreateHelmReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateHelmReleaseInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create helm release internal server error response has a 2xx status code
func (o *CreateHelmReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create helm release internal server error response has a 3xx status code
func (o *CreateHelmReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create helm release internal server error response has a 4xx status code
func (o *CreateHelmReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create helm release internal server error response has a 5xx status code
func (o *CreateHelmReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create helm release internal server error response a status code equal to that given
func (o *CreateHelmReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create helm release internal server error response
func (o *CreateHelmReleaseInternalServerError) Code() int {
	return 500
}

func (o *CreateHelmReleaseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateHelmReleaseInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] createHelmReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateHelmReleaseInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateHelmReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
