// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-runner-go/models"
)

// DeleteHelmReleaseReader is a Reader for the DeleteHelmRelease structure.
type DeleteHelmReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteHelmReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteHelmReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteHelmReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteHelmReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteHelmReleaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteHelmReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteHelmReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}] DeleteHelmRelease", response, response.Code())
	}
}

// NewDeleteHelmReleaseOK creates a DeleteHelmReleaseOK with default headers values
func NewDeleteHelmReleaseOK() *DeleteHelmReleaseOK {
	return &DeleteHelmReleaseOK{}
}

/*
DeleteHelmReleaseOK describes a response with status code 200, with default header values.

OK
*/
type DeleteHelmReleaseOK struct {
	Payload []*models.AppHelmRelease
}

// IsSuccess returns true when this delete helm release o k response has a 2xx status code
func (o *DeleteHelmReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete helm release o k response has a 3xx status code
func (o *DeleteHelmReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete helm release o k response has a 4xx status code
func (o *DeleteHelmReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete helm release o k response has a 5xx status code
func (o *DeleteHelmReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete helm release o k response a status code equal to that given
func (o *DeleteHelmReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete helm release o k response
func (o *DeleteHelmReleaseOK) Code() int {
	return 200
}

func (o *DeleteHelmReleaseOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseOK  %+v", 200, o.Payload)
}

func (o *DeleteHelmReleaseOK) String() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseOK  %+v", 200, o.Payload)
}

func (o *DeleteHelmReleaseOK) GetPayload() []*models.AppHelmRelease {
	return o.Payload
}

func (o *DeleteHelmReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHelmReleaseBadRequest creates a DeleteHelmReleaseBadRequest with default headers values
func NewDeleteHelmReleaseBadRequest() *DeleteHelmReleaseBadRequest {
	return &DeleteHelmReleaseBadRequest{}
}

/*
DeleteHelmReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteHelmReleaseBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete helm release bad request response has a 2xx status code
func (o *DeleteHelmReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete helm release bad request response has a 3xx status code
func (o *DeleteHelmReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete helm release bad request response has a 4xx status code
func (o *DeleteHelmReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete helm release bad request response has a 5xx status code
func (o *DeleteHelmReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete helm release bad request response a status code equal to that given
func (o *DeleteHelmReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete helm release bad request response
func (o *DeleteHelmReleaseBadRequest) Code() int {
	return 400
}

func (o *DeleteHelmReleaseBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteHelmReleaseBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteHelmReleaseBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteHelmReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHelmReleaseUnauthorized creates a DeleteHelmReleaseUnauthorized with default headers values
func NewDeleteHelmReleaseUnauthorized() *DeleteHelmReleaseUnauthorized {
	return &DeleteHelmReleaseUnauthorized{}
}

/*
DeleteHelmReleaseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteHelmReleaseUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete helm release unauthorized response has a 2xx status code
func (o *DeleteHelmReleaseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete helm release unauthorized response has a 3xx status code
func (o *DeleteHelmReleaseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete helm release unauthorized response has a 4xx status code
func (o *DeleteHelmReleaseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete helm release unauthorized response has a 5xx status code
func (o *DeleteHelmReleaseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete helm release unauthorized response a status code equal to that given
func (o *DeleteHelmReleaseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete helm release unauthorized response
func (o *DeleteHelmReleaseUnauthorized) Code() int {
	return 401
}

func (o *DeleteHelmReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteHelmReleaseUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteHelmReleaseUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteHelmReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHelmReleaseForbidden creates a DeleteHelmReleaseForbidden with default headers values
func NewDeleteHelmReleaseForbidden() *DeleteHelmReleaseForbidden {
	return &DeleteHelmReleaseForbidden{}
}

/*
DeleteHelmReleaseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteHelmReleaseForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete helm release forbidden response has a 2xx status code
func (o *DeleteHelmReleaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete helm release forbidden response has a 3xx status code
func (o *DeleteHelmReleaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete helm release forbidden response has a 4xx status code
func (o *DeleteHelmReleaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete helm release forbidden response has a 5xx status code
func (o *DeleteHelmReleaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete helm release forbidden response a status code equal to that given
func (o *DeleteHelmReleaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete helm release forbidden response
func (o *DeleteHelmReleaseForbidden) Code() int {
	return 403
}

func (o *DeleteHelmReleaseForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseForbidden  %+v", 403, o.Payload)
}

func (o *DeleteHelmReleaseForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseForbidden  %+v", 403, o.Payload)
}

func (o *DeleteHelmReleaseForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteHelmReleaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHelmReleaseNotFound creates a DeleteHelmReleaseNotFound with default headers values
func NewDeleteHelmReleaseNotFound() *DeleteHelmReleaseNotFound {
	return &DeleteHelmReleaseNotFound{}
}

/*
DeleteHelmReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteHelmReleaseNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete helm release not found response has a 2xx status code
func (o *DeleteHelmReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete helm release not found response has a 3xx status code
func (o *DeleteHelmReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete helm release not found response has a 4xx status code
func (o *DeleteHelmReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete helm release not found response has a 5xx status code
func (o *DeleteHelmReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete helm release not found response a status code equal to that given
func (o *DeleteHelmReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete helm release not found response
func (o *DeleteHelmReleaseNotFound) Code() int {
	return 404
}

func (o *DeleteHelmReleaseNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHelmReleaseNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseNotFound  %+v", 404, o.Payload)
}

func (o *DeleteHelmReleaseNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteHelmReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteHelmReleaseInternalServerError creates a DeleteHelmReleaseInternalServerError with default headers values
func NewDeleteHelmReleaseInternalServerError() *DeleteHelmReleaseInternalServerError {
	return &DeleteHelmReleaseInternalServerError{}
}

/*
DeleteHelmReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteHelmReleaseInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete helm release internal server error response has a 2xx status code
func (o *DeleteHelmReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete helm release internal server error response has a 3xx status code
func (o *DeleteHelmReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete helm release internal server error response has a 4xx status code
func (o *DeleteHelmReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete helm release internal server error response has a 5xx status code
func (o *DeleteHelmReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete helm release internal server error response a status code equal to that given
func (o *DeleteHelmReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete helm release internal server error response
func (o *DeleteHelmReleaseInternalServerError) Code() int {
	return 500
}

func (o *DeleteHelmReleaseInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteHelmReleaseInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] deleteHelmReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteHelmReleaseInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteHelmReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
