// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-runner-go/models"
)

// GetHelmReleaseReader is a Reader for the GetHelmRelease structure.
type GetHelmReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHelmReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHelmReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetHelmReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetHelmReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetHelmReleaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetHelmReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHelmReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}] GetHelmRelease", response, response.Code())
	}
}

// NewGetHelmReleaseOK creates a GetHelmReleaseOK with default headers values
func NewGetHelmReleaseOK() *GetHelmReleaseOK {
	return &GetHelmReleaseOK{}
}

/*
GetHelmReleaseOK describes a response with status code 200, with default header values.

OK
*/
type GetHelmReleaseOK struct {
	Payload *models.HelmRelease
}

// IsSuccess returns true when this get helm release o k response has a 2xx status code
func (o *GetHelmReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get helm release o k response has a 3xx status code
func (o *GetHelmReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm release o k response has a 4xx status code
func (o *GetHelmReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get helm release o k response has a 5xx status code
func (o *GetHelmReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm release o k response a status code equal to that given
func (o *GetHelmReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get helm release o k response
func (o *GetHelmReleaseOK) Code() int {
	return 200
}

func (o *GetHelmReleaseOK) Error() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseOK  %+v", 200, o.Payload)
}

func (o *GetHelmReleaseOK) String() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseOK  %+v", 200, o.Payload)
}

func (o *GetHelmReleaseOK) GetPayload() *models.HelmRelease {
	return o.Payload
}

func (o *GetHelmReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HelmRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHelmReleaseBadRequest creates a GetHelmReleaseBadRequest with default headers values
func NewGetHelmReleaseBadRequest() *GetHelmReleaseBadRequest {
	return &GetHelmReleaseBadRequest{}
}

/*
GetHelmReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetHelmReleaseBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get helm release bad request response has a 2xx status code
func (o *GetHelmReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm release bad request response has a 3xx status code
func (o *GetHelmReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm release bad request response has a 4xx status code
func (o *GetHelmReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get helm release bad request response has a 5xx status code
func (o *GetHelmReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm release bad request response a status code equal to that given
func (o *GetHelmReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get helm release bad request response
func (o *GetHelmReleaseBadRequest) Code() int {
	return 400
}

func (o *GetHelmReleaseBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *GetHelmReleaseBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *GetHelmReleaseBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetHelmReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHelmReleaseUnauthorized creates a GetHelmReleaseUnauthorized with default headers values
func NewGetHelmReleaseUnauthorized() *GetHelmReleaseUnauthorized {
	return &GetHelmReleaseUnauthorized{}
}

/*
GetHelmReleaseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetHelmReleaseUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get helm release unauthorized response has a 2xx status code
func (o *GetHelmReleaseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm release unauthorized response has a 3xx status code
func (o *GetHelmReleaseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm release unauthorized response has a 4xx status code
func (o *GetHelmReleaseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get helm release unauthorized response has a 5xx status code
func (o *GetHelmReleaseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm release unauthorized response a status code equal to that given
func (o *GetHelmReleaseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get helm release unauthorized response
func (o *GetHelmReleaseUnauthorized) Code() int {
	return 401
}

func (o *GetHelmReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *GetHelmReleaseUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *GetHelmReleaseUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetHelmReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHelmReleaseForbidden creates a GetHelmReleaseForbidden with default headers values
func NewGetHelmReleaseForbidden() *GetHelmReleaseForbidden {
	return &GetHelmReleaseForbidden{}
}

/*
GetHelmReleaseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetHelmReleaseForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get helm release forbidden response has a 2xx status code
func (o *GetHelmReleaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm release forbidden response has a 3xx status code
func (o *GetHelmReleaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm release forbidden response has a 4xx status code
func (o *GetHelmReleaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get helm release forbidden response has a 5xx status code
func (o *GetHelmReleaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm release forbidden response a status code equal to that given
func (o *GetHelmReleaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get helm release forbidden response
func (o *GetHelmReleaseForbidden) Code() int {
	return 403
}

func (o *GetHelmReleaseForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseForbidden  %+v", 403, o.Payload)
}

func (o *GetHelmReleaseForbidden) String() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseForbidden  %+v", 403, o.Payload)
}

func (o *GetHelmReleaseForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetHelmReleaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHelmReleaseNotFound creates a GetHelmReleaseNotFound with default headers values
func NewGetHelmReleaseNotFound() *GetHelmReleaseNotFound {
	return &GetHelmReleaseNotFound{}
}

/*
GetHelmReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetHelmReleaseNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get helm release not found response has a 2xx status code
func (o *GetHelmReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm release not found response has a 3xx status code
func (o *GetHelmReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm release not found response has a 4xx status code
func (o *GetHelmReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get helm release not found response has a 5xx status code
func (o *GetHelmReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get helm release not found response a status code equal to that given
func (o *GetHelmReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get helm release not found response
func (o *GetHelmReleaseNotFound) Code() int {
	return 404
}

func (o *GetHelmReleaseNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseNotFound  %+v", 404, o.Payload)
}

func (o *GetHelmReleaseNotFound) String() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseNotFound  %+v", 404, o.Payload)
}

func (o *GetHelmReleaseNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetHelmReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHelmReleaseInternalServerError creates a GetHelmReleaseInternalServerError with default headers values
func NewGetHelmReleaseInternalServerError() *GetHelmReleaseInternalServerError {
	return &GetHelmReleaseInternalServerError{}
}

/*
GetHelmReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetHelmReleaseInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get helm release internal server error response has a 2xx status code
func (o *GetHelmReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get helm release internal server error response has a 3xx status code
func (o *GetHelmReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get helm release internal server error response has a 4xx status code
func (o *GetHelmReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get helm release internal server error response has a 5xx status code
func (o *GetHelmReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get helm release internal server error response a status code equal to that given
func (o *GetHelmReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get helm release internal server error response
func (o *GetHelmReleaseInternalServerError) Code() int {
	return 500
}

func (o *GetHelmReleaseInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHelmReleaseInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/helm-releases/{helm_chart_id}/releases/{namespace}/{key}][%d] getHelmReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHelmReleaseInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetHelmReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
