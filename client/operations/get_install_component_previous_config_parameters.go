// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInstallComponentPreviousConfigParams creates a new GetInstallComponentPreviousConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInstallComponentPreviousConfigParams() *GetInstallComponentPreviousConfigParams {
	return &GetInstallComponentPreviousConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstallComponentPreviousConfigParamsWithTimeout creates a new GetInstallComponentPreviousConfigParams object
// with the ability to set a timeout on a request.
func NewGetInstallComponentPreviousConfigParamsWithTimeout(timeout time.Duration) *GetInstallComponentPreviousConfigParams {
	return &GetInstallComponentPreviousConfigParams{
		timeout: timeout,
	}
}

// NewGetInstallComponentPreviousConfigParamsWithContext creates a new GetInstallComponentPreviousConfigParams object
// with the ability to set a context for a request.
func NewGetInstallComponentPreviousConfigParamsWithContext(ctx context.Context) *GetInstallComponentPreviousConfigParams {
	return &GetInstallComponentPreviousConfigParams{
		Context: ctx,
	}
}

// NewGetInstallComponentPreviousConfigParamsWithHTTPClient creates a new GetInstallComponentPreviousConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInstallComponentPreviousConfigParamsWithHTTPClient(client *http.Client) *GetInstallComponentPreviousConfigParams {
	return &GetInstallComponentPreviousConfigParams{
		HTTPClient: client,
	}
}

/*
GetInstallComponentPreviousConfigParams contains all the parameters to send to the API endpoint

	for the get install component previous config operation.

	Typically these are written to a http.Request.
*/
type GetInstallComponentPreviousConfigParams struct {

	/* ComponentID.

	   component ID
	*/
	ComponentID string

	/* Count.

	   count
	*/
	Count *int64

	/* InstallID.

	   install ID
	*/
	InstallID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get install component previous config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstallComponentPreviousConfigParams) WithDefaults() *GetInstallComponentPreviousConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get install component previous config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstallComponentPreviousConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) WithTimeout(timeout time.Duration) *GetInstallComponentPreviousConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) WithContext(ctx context.Context) *GetInstallComponentPreviousConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) WithHTTPClient(client *http.Client) *GetInstallComponentPreviousConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComponentID adds the componentID to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) WithComponentID(componentID string) *GetInstallComponentPreviousConfigParams {
	o.SetComponentID(componentID)
	return o
}

// SetComponentID adds the componentId to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) SetComponentID(componentID string) {
	o.ComponentID = componentID
}

// WithCount adds the count to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) WithCount(count *int64) *GetInstallComponentPreviousConfigParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) SetCount(count *int64) {
	o.Count = count
}

// WithInstallID adds the installID to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) WithInstallID(installID string) *GetInstallComponentPreviousConfigParams {
	o.SetInstallID(installID)
	return o
}

// SetInstallID adds the installId to the get install component previous config params
func (o *GetInstallComponentPreviousConfigParams) SetInstallID(installID string) {
	o.InstallID = installID
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstallComponentPreviousConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param component_id
	if err := r.SetPathParam("component_id", o.ComponentID); err != nil {
		return err
	}

	if o.Count != nil {

		// query param count
		var qrCount int64

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	// path param install_id
	if err := r.SetPathParam("install_id", o.InstallID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
