// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-runner-go/models"
)

// UpdateRunnerJobReader is a Reader for the UpdateRunnerJob structure.
type UpdateRunnerJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRunnerJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRunnerJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRunnerJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRunnerJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRunnerJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRunnerJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRunnerJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/runner-jobs/{runner_job_id}] UpdateRunnerJob", response, response.Code())
	}
}

// NewUpdateRunnerJobOK creates a UpdateRunnerJobOK with default headers values
func NewUpdateRunnerJobOK() *UpdateRunnerJobOK {
	return &UpdateRunnerJobOK{}
}

/*
UpdateRunnerJobOK describes a response with status code 200, with default header values.

OK
*/
type UpdateRunnerJobOK struct {
	Payload *models.AppRunnerJob
}

// IsSuccess returns true when this update runner job o k response has a 2xx status code
func (o *UpdateRunnerJobOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update runner job o k response has a 3xx status code
func (o *UpdateRunnerJobOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner job o k response has a 4xx status code
func (o *UpdateRunnerJobOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update runner job o k response has a 5xx status code
func (o *UpdateRunnerJobOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner job o k response a status code equal to that given
func (o *UpdateRunnerJobOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update runner job o k response
func (o *UpdateRunnerJobOK) Code() int {
	return 200
}

func (o *UpdateRunnerJobOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobOK %s", 200, payload)
}

func (o *UpdateRunnerJobOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobOK %s", 200, payload)
}

func (o *UpdateRunnerJobOK) GetPayload() *models.AppRunnerJob {
	return o.Payload
}

func (o *UpdateRunnerJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppRunnerJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerJobBadRequest creates a UpdateRunnerJobBadRequest with default headers values
func NewUpdateRunnerJobBadRequest() *UpdateRunnerJobBadRequest {
	return &UpdateRunnerJobBadRequest{}
}

/*
UpdateRunnerJobBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRunnerJobBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner job bad request response has a 2xx status code
func (o *UpdateRunnerJobBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner job bad request response has a 3xx status code
func (o *UpdateRunnerJobBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner job bad request response has a 4xx status code
func (o *UpdateRunnerJobBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner job bad request response has a 5xx status code
func (o *UpdateRunnerJobBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner job bad request response a status code equal to that given
func (o *UpdateRunnerJobBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update runner job bad request response
func (o *UpdateRunnerJobBadRequest) Code() int {
	return 400
}

func (o *UpdateRunnerJobBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobBadRequest %s", 400, payload)
}

func (o *UpdateRunnerJobBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobBadRequest %s", 400, payload)
}

func (o *UpdateRunnerJobBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerJobUnauthorized creates a UpdateRunnerJobUnauthorized with default headers values
func NewUpdateRunnerJobUnauthorized() *UpdateRunnerJobUnauthorized {
	return &UpdateRunnerJobUnauthorized{}
}

/*
UpdateRunnerJobUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateRunnerJobUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner job unauthorized response has a 2xx status code
func (o *UpdateRunnerJobUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner job unauthorized response has a 3xx status code
func (o *UpdateRunnerJobUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner job unauthorized response has a 4xx status code
func (o *UpdateRunnerJobUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner job unauthorized response has a 5xx status code
func (o *UpdateRunnerJobUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner job unauthorized response a status code equal to that given
func (o *UpdateRunnerJobUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update runner job unauthorized response
func (o *UpdateRunnerJobUnauthorized) Code() int {
	return 401
}

func (o *UpdateRunnerJobUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobUnauthorized %s", 401, payload)
}

func (o *UpdateRunnerJobUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobUnauthorized %s", 401, payload)
}

func (o *UpdateRunnerJobUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerJobForbidden creates a UpdateRunnerJobForbidden with default headers values
func NewUpdateRunnerJobForbidden() *UpdateRunnerJobForbidden {
	return &UpdateRunnerJobForbidden{}
}

/*
UpdateRunnerJobForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRunnerJobForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner job forbidden response has a 2xx status code
func (o *UpdateRunnerJobForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner job forbidden response has a 3xx status code
func (o *UpdateRunnerJobForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner job forbidden response has a 4xx status code
func (o *UpdateRunnerJobForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner job forbidden response has a 5xx status code
func (o *UpdateRunnerJobForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner job forbidden response a status code equal to that given
func (o *UpdateRunnerJobForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update runner job forbidden response
func (o *UpdateRunnerJobForbidden) Code() int {
	return 403
}

func (o *UpdateRunnerJobForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobForbidden %s", 403, payload)
}

func (o *UpdateRunnerJobForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobForbidden %s", 403, payload)
}

func (o *UpdateRunnerJobForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerJobNotFound creates a UpdateRunnerJobNotFound with default headers values
func NewUpdateRunnerJobNotFound() *UpdateRunnerJobNotFound {
	return &UpdateRunnerJobNotFound{}
}

/*
UpdateRunnerJobNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateRunnerJobNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner job not found response has a 2xx status code
func (o *UpdateRunnerJobNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner job not found response has a 3xx status code
func (o *UpdateRunnerJobNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner job not found response has a 4xx status code
func (o *UpdateRunnerJobNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner job not found response has a 5xx status code
func (o *UpdateRunnerJobNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner job not found response a status code equal to that given
func (o *UpdateRunnerJobNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update runner job not found response
func (o *UpdateRunnerJobNotFound) Code() int {
	return 404
}

func (o *UpdateRunnerJobNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobNotFound %s", 404, payload)
}

func (o *UpdateRunnerJobNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobNotFound %s", 404, payload)
}

func (o *UpdateRunnerJobNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerJobInternalServerError creates a UpdateRunnerJobInternalServerError with default headers values
func NewUpdateRunnerJobInternalServerError() *UpdateRunnerJobInternalServerError {
	return &UpdateRunnerJobInternalServerError{}
}

/*
UpdateRunnerJobInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateRunnerJobInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner job internal server error response has a 2xx status code
func (o *UpdateRunnerJobInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner job internal server error response has a 3xx status code
func (o *UpdateRunnerJobInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner job internal server error response has a 4xx status code
func (o *UpdateRunnerJobInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update runner job internal server error response has a 5xx status code
func (o *UpdateRunnerJobInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update runner job internal server error response a status code equal to that given
func (o *UpdateRunnerJobInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update runner job internal server error response
func (o *UpdateRunnerJobInternalServerError) Code() int {
	return 500
}

func (o *UpdateRunnerJobInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobInternalServerError %s", 500, payload)
}

func (o *UpdateRunnerJobInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/runner-jobs/{runner_job_id}][%d] updateRunnerJobInternalServerError %s", 500, payload)
}

func (o *UpdateRunnerJobInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
